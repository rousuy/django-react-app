"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add src directory to Python path for absolute imports
sys.path.insert(0, str(BASE_DIR / "src"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("API_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")

ALLOWED_HOSTS = [host.strip() for host in os.getenv("API_ALLOWED_HOSTS", "").split(",")]

PROTOCOL = "http" if DEBUG else "https"


CORS_ALLOWED_ORIGINS = [f"{PROTOCOL}://{host.strip()}" for host in os.getenv("API_CORS_ALLOWED_ORIGINS", "").split(",")]


# CSRF_TRUSTED_ORIGINS is only needed if using Django forms or SessionAuthentication with cookies
# Uncomment and configure if needed:
# CSRF_TRUSTED_ORIGINS = [f"{PROTOCOL}://{host}" for host in ALLOWED_HOSTS] # Noqa

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # apps
    "src.users",
    # third-party
    "rest_framework",
    "django_celery_results",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # CSRF middleware is not needed for token-based APIs (e.g., JWT via React)
    # Uncomment if using Django forms or SessionAuthentication with cookies
    # 'django.middleware.csrf.CsrfViewMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

# Enable Silk for profiling and Django Extensions for dev utilities.
if DEBUG == "False":
    INSTALLED_APPS.append("django_extensions")
    INSTALLED_APPS.append("silk")
    MIDDLEWARE.insert(0, "silk.middleware.SilkyMiddleware")

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USR"),
        "PASSWORD": os.getenv("POSTGRES_PASSWD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("DB_PORT", "5432"),
        "OPTIONS": {"sslmode": os.getenv("SSL_MODE", "prefer")},
    },
}

# Django cache config using database (PoC only - use Redis in production)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "django_cache_table",
    }
}

# ================================ CELERY CONFIGURATION ================================
# Celery broker configuration
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")

# WARNING: DATABASE RESULT BACKEND - NOT RECOMMENDED FOR PRODUCTION
# This configuration uses PostgreSQL to store Celery task results.
#
# PROBLEMS WITH DATABASE BACKEND:
# - Performance bottleneck under high load
# - Database locks and contention issues
# - Not suitable for high-frequency tasks
# - Requires manual cleanup of old results
# - Increases database size and backup time
#
# PRODUCTION RECOMMENDATIONS:
# 1. Use Redis: CELERY_RESULT_BACKEND = "redis://redis:6379/1"
# 2. Create custom Django models for audit trail:
example = """
class TaskAuditLog(models.Model):
    task_id = models.CharField(max_length=255, unique=True)
    task_name = models.CharField(max_length=255)
    status = models.CharField(max_length=50)
    result = models.JSONField()
    created_at = models.DateTimeField(auto_now_add=True)
    completed_at = models.DateTimeField(null=True)
"""
# 3. Use Celery signals to populate audit models
# 4. Set CELERY_TASK_IGNORE_RESULT = True for fire-and-forget tasks
#
# This setup is ONLY for PoC/Development purposes!
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = "django-cache"

# Database result backend settings
CELERY_RESULT_EXPIRES = int(os.getenv("CELERY_RESULT_EXPIRES", "86400"))  # 24 hours for PoC

# Celery task configuration
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "America/Sao_Paulo"
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_EXTENDED = True

# RabbitMQ specific settings
CELERY_BROKER_TRANSPORT_OPTIONS = {"visibility_timeout": 3600, "fanout_prefix": True, "fanout_patterns": True}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = "/staticfiles/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "/mediafiles/"
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")

# WhiteNoise compression and cache support
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# AWS S3 config
if os.getenv("S3_ACCESS_KEY"):
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_ACCESS_KEY_ID = os.getenv("S3_ACCESS_KEY")
    AWS_SECRET_ACCESS_KEY = os.getenv("S3_SECRET_KEY")
    AWS_STORAGE_BUCKET_NAME = os.getenv("S3_BUCKET")
    AWS_S3_ENDPOINT_URL = os.getenv("S3_ENDPOINT")
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_DEFAULT_ACL = "public-read"
    AWS_QUERYSTRING_AUTH = os.getenv("S3_QUERYSTRING_AUTH") == "True"
    AWS_S3_SIGNATURE_VERSION = "s3v4"
    MEDIA_CDN = os.getenv("MEDIA_CDN", AWS_S3_ENDPOINT_URL[8:])
    MEDIA_URL = f"{MEDIA_CDN}/{AWS_STORAGE_BUCKET_NAME}/"
    MEDIA_ROOT = os.getenv("MEDIA_FOLDER", "")


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "users.User"

# Restframework config
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.AllowAny"],  # no auth required, open access
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}

# OpenApi Swagger config
SPECTACULAR_SETTINGS = {
    "TITLE": "API",
    "DESCRIPTION": "POC System",
    "VERSION": "0.1.0",
    "SCHEMA_PATH_PREFIX": r"/api/v[0-9]",
}
